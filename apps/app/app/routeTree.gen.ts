/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicRouteImport } from './routes/(public)/route'
import { Route as privateRouteImport } from './routes/(private)/route'
import { Route as privateIndexImport } from './routes/(private)/index'
import { Route as publicSignInIndexImport } from './routes/(public)/sign-in/index'
import { Route as ApiAuthGithubCallbackIndexImport } from './routes/api/auth/github/callback/index'

// Create/Update Routes

const publicRouteRoute = publicRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRoute,
} as any)

const privateRouteRoute = privateRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRoute,
} as any)

const privateIndexRoute = privateIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => privateRouteRoute,
} as any)

const publicSignInIndexRoute = publicSignInIndexImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => publicRouteRoute,
} as any)

const ApiAuthGithubCallbackIndexRoute = ApiAuthGithubCallbackIndexImport.update(
  {
    id: '/api/auth/github/callback/',
    path: '/api/auth/github/callback/',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(private)': {
      id: '/(private)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateRouteImport
      parentRoute: typeof rootRoute
    }
    '/(public)': {
      id: '/(public)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicRouteImport
      parentRoute: typeof rootRoute
    }
    '/(private)/': {
      id: '/(private)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateIndexImport
      parentRoute: typeof privateRouteImport
    }
    '/(public)/sign-in/': {
      id: '/(public)/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof publicSignInIndexImport
      parentRoute: typeof publicRouteImport
    }
    '/api/auth/github/callback/': {
      id: '/api/auth/github/callback/'
      path: '/api/auth/github/callback'
      fullPath: '/api/auth/github/callback'
      preLoaderRoute: typeof ApiAuthGithubCallbackIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface privateRouteRouteChildren {
  privateIndexRoute: typeof privateIndexRoute
}

const privateRouteRouteChildren: privateRouteRouteChildren = {
  privateIndexRoute: privateIndexRoute,
}

const privateRouteRouteWithChildren = privateRouteRoute._addFileChildren(
  privateRouteRouteChildren,
)

interface publicRouteRouteChildren {
  publicSignInIndexRoute: typeof publicSignInIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicSignInIndexRoute: publicSignInIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof privateIndexRoute
  '/sign-in': typeof publicSignInIndexRoute
  '/api/auth/github/callback': typeof ApiAuthGithubCallbackIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof privateIndexRoute
  '/sign-in': typeof publicSignInIndexRoute
  '/api/auth/github/callback': typeof ApiAuthGithubCallbackIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(private)': typeof privateRouteRouteWithChildren
  '/(public)': typeof publicRouteRouteWithChildren
  '/(private)/': typeof privateIndexRoute
  '/(public)/sign-in/': typeof publicSignInIndexRoute
  '/api/auth/github/callback/': typeof ApiAuthGithubCallbackIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sign-in' | '/api/auth/github/callback'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sign-in' | '/api/auth/github/callback'
  id:
    | '__root__'
    | '/(private)'
    | '/(public)'
    | '/(private)/'
    | '/(public)/sign-in/'
    | '/api/auth/github/callback/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  privateRouteRoute: typeof privateRouteRouteWithChildren
  publicRouteRoute: typeof publicRouteRouteWithChildren
  ApiAuthGithubCallbackIndexRoute: typeof ApiAuthGithubCallbackIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  privateRouteRoute: privateRouteRouteWithChildren,
  publicRouteRoute: publicRouteRouteWithChildren,
  ApiAuthGithubCallbackIndexRoute: ApiAuthGithubCallbackIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(private)",
        "/(public)",
        "/api/auth/github/callback/"
      ]
    },
    "/(private)": {
      "filePath": "(private)/route.tsx",
      "children": [
        "/(private)/"
      ]
    },
    "/(public)": {
      "filePath": "(public)/route.tsx",
      "children": [
        "/(public)/sign-in/"
      ]
    },
    "/(private)/": {
      "filePath": "(private)/index.tsx",
      "parent": "/(private)"
    },
    "/(public)/sign-in/": {
      "filePath": "(public)/sign-in/index.tsx",
      "parent": "/(public)"
    },
    "/api/auth/github/callback/": {
      "filePath": "api/auth/github/callback/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
